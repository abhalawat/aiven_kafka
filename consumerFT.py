# -*- coding: utf-8 -*-
"""consumer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T_bNamOHsFuxR02_7ISimKANUSzA8ebw
"""

!pip install --force-reinstall jsonschema==3.2.0

pip install kafka-python

pip install web3

from web3 import Web3
from web3.middleware import geth_poa_middleware

from kafka import KafkaConsumer
from kafka import KafkaProducer

import json
group_id = "my_pizza_group"

consumer = KafkaConsumer(
 client_id = "client1",
 group_id = group_id,
 bootstrap_servers="kafka-deqode-0c18.aivencloud.com"+":"+str(21780),
 security_protocol = "SSL",
 ssl_cafile = "ca.pem",
 ssl_certfile = "service.cert",
 ssl_keyfile = "service.key",
 value_deserializer = lambda v: json.loads(v.decode('ascii')),
 key_deserializer = lambda k: json.loads(k.decode('ascii')),
 max_poll_records = 10
)
consumer.topics()
consumer.subscribe(topics=["Address"])
consumer.subscription()

producer = KafkaProducer(
 bootstrap_servers="kafka-deqode-0c18.aivencloud.com"+":"+str(21780),
 security_protocol="SSL",
 ssl_cafile="ca.pem",
 ssl_certfile="service.cert",
 ssl_keyfile="service.key",
 value_serializer=lambda v: json.dumps(v).encode('ascii'),
 key_serializer=lambda k: json.dumps(k).encode('ascii')
)
topic_name = 'filtered_data'

def kafkaData(address, fromBlock, toBlock):
  producer.send(
      topic_name,
      #key={"id": count},
      value={"address":address, "fromBlock":fromBlock, "toBlock":toBlock}
  )

def erc20(block,address):
    infura_url= "wss://eth-mainnet.alchemyapi.io/v2/NMMzTK9vae0CA0DrxtR_TiqCHkf3qkqD"
    web3 = Web3(Web3.WebsocketProvider(infura_url))
    web3.middleware_onion.inject(geth_poa_middleware, layer=0)
    latest = web3.eth.blockNumber
    firstBlock = block
    totalResult = latest - firstBlock
    initial = firstBlock
    if totalResult >2000:
        while totalResult>=2000:
            fromBlock = initial
            toBlock = initial +2000
            kafkaData(address, fromBlock, toBlock)
            totalResult = totalResult -2000
            initial = toBlock
        if totalResult != 0:
            fromBlock = initial
            toBlock = initial + totalResult
            kafkaData(address, fromBlock, toBlock)
    else:
        kafkaData(address, firstBlock, latest)

for message in consumer:
    # print ("%d:%d: k=%s v=%s" % (message.partition,
    #                              message.offset,
    #                              message.key,
    #                              message.value))
    address = message[6]['address']
    block = message[6]['block']
    erc20(block,address)

